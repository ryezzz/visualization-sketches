{"version":3,"file":"component---src-pages-childhood-diary-swarm-scroll-smooth-js-f731f907e805007e89c2.js","mappings":"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","sources":["webpack://visualization-sketches/./src/consts/childhoodDiaryConsts.js","webpack://visualization-sketches/./src/components/BeeswarmSvg/SvgScrollBeeswarm.js","webpack://visualization-sketches/./src/pages/childhood-diary-swarm-scroll-smooth.js"],"sourcesContent":["export const unNestDiaryData =(elem)=>elem.allDataCsv.edges[0].node.items\n// .allDataCsv.edges[0].node.items\n","import * as d3 from \"d3\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { dodge } from \"../../utils/visualizationUtils\";\nimport * as rough from \"roughjs/bin/svg\";\nimport { gsap } from \"gsap\";\nimport ReactRough, { Circle } from \"react-rough\";\n\nfunction SvgScrollBeeswarm(\n  props,\n  {\n    data = props.data,\n    selectedDate = props.selectedDate,\n    selectedValue = props.selectedValue,\n    height = props.height,\n    width = props.width,\n    marginLeft = props.margin,\n    marginBottom = props.marginTop,\n    marginRight = props.marginRight,\n    padding = 0,\n  }\n) {\n\n  function usePrevious(value, defaultValue) {\n    let isNotNull = value != null ? value : defaultValue;\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = isNotNull;\n    });\n    return ref.current;\n  }\n\n  const [animatedData, setAnimatedData] = useState([]);\n  const [currentDate, setCurrentDate] = useState(null);\n  const prevDate = usePrevious(currentDate, \"year\");\n\n  let rScale = d3\n    .scaleLinear()\n    .domain(d3.extent(data, (d) => d[selectedValue]))\n    .range([1, height / 80]);\n\n  const xScale = (_, prevOrCurrent) =>\n    d3\n      .scaleSequential()\n      .domain(d3.extent(data, (d) => d[prevOrCurrent]))\n      .range([100, width]);\n\n  let r = (selectedValue) => rScale(selectedValue);\n\n  useEffect(() => {\n    setCurrentDate(\"year\");\n  }, []);\n\n  const dodgedParticlesOrigin = dodge(\n    data,\n    prevDate,\n    selectedValue,\n    xScale(data, prevDate),\n    r,\n    padding\n  );\n\n  const dodgedParticlesDestination = dodge(\n    data,\n    currentDate,\n    selectedValue,\n    xScale(data, currentDate),\n    r,\n    padding\n  );\n\n  useEffect(() => {\n    // let isNotNull =\n    //   dodgedParticlesOrigin[0].x && dodgedParticlesDestination[0].x\n    //     ? true\n    //     : false;\n\n    function animation  ()  {\n      gsap.fromTo(\n        dodgedParticlesOrigin,\n        {\n          x: (index) => dodgedParticlesOrigin[index].x,\n          y: (index) => dodgedParticlesOrigin[index].y,\n        },\n        {\n          x: (index) => dodgedParticlesDestination[index].x,\n          y: (index) => dodgedParticlesDestination[index].y,\n          ease: \"power.3.out\",\n          duration: 0.5,\n          // Documentation: https://greensock.com/docs/v3/Staggers\n          onUpdate: animate,\n          lazy: true,\n          stagger: {\n            each: 0.001,\n            from: \"random\",\n          },\n        }\n      );\n    };\n\n    animation()\n\n\n    function animate() {\n      let newParticles = [];\n      dodgedParticlesOrigin.map((d) => newParticles.push(d));\n      setAnimatedData(newParticles);\n    }\n\n\n  }, [currentDate]);\n\n  let timeFrames = [\"week\", \"month\", \"year\"];\n\n\n\n  const TimeButton = (timeframe, setFun) => {\n\n    function onClick(e) {\n      setFun(e.target.value);\n    }\n\n    return (\n      <button value={timeframe} onClick={onClick}>\n        {timeframe}\n      </button>\n    );\n  };\n\n  return (\n    <>\n      {timeFrames.map((timeframe) => TimeButton(timeframe, setCurrentDate))}\n\n      <ReactRough width={width} height={height} renderer=\"svg\">\n        {animatedData?.map((d, i) => {\n\n          return (\n            <>\n              {\n                <Circle\n                  diameter={d.r * 2}\n                  stroke=\"purple\"\n                  x={d.x}\n                  y={height - marginBottom - padding - d.y}\n                />\n              }\n            </>\n          );\n        })}\n      </ReactRough>\n    </>\n  );\n}\n\nexport default SvgScrollBeeswarm;\n\n// <ReactRough width={width} height={height} renderer=\"svg\">\n\n// {dodgedParticlesOrigin.map(\n//   (d, i) => {\n//   // console.logAnimatedPointHook (0, d.x)\n//   // console.log(d.x)\n\n//     return (\n// <Circle\n//   diameter={d.r * 2}\n//   fill=\"purple\"\n//   x={d.x}\n//   y={height - marginBottom - padding - d.y}\n// />\n//     )\n//   }\n// )}\n// </ReactRough>\n\n// https://www.framer.com/docs/animation/\n\n// const x = useMotionValue(0)\n\n// useEffect(() => {\n//   const controls = animate(x, 100, {\n//     type: \"spring\",\n//     stiffness: 2000,\n//     onComplete: v => {}\n//   })\n\n//   return controls.stop\n// })\n\n// {timeFrames.map((elem)=>TimeButton(elem,onClick))}\n\n// <ReactRough width={width} height={height} renderer=\"svg\">\n\n//     {animatedData?.map(\n//       (d, i) => {\n//       // console.logAnimatedPointHook (0, d.x)\n//       // console.log(d.x)\n\n//         return (\n\n//               <Circle\n//     diameter={d.r * 2}\n//     stroke=\"purple\"\n//     x={d.x}\n//     y={height - marginBottom - padding - d.y}\n//   />\n\n//           // <circle fill=\"white\" cx={d.x} cy={height - marginBottom - padding - d.y} r={d.r}/>\n\n//         )\n//       }\n//     )}\n// </ReactRough>\n\n//   </>\n\n// import * as d3 from \"d3\";\n// import React, { useRef, useEffect, useState } from \"react\";\n// import { dodge } from \"../../utils/visualizationUtils\";\n// import * as rough from \"roughjs/bin/svg\";\n// import { gsap } from \"gsap\";\n\n// function SvgScrollBeeswarm(\n//   props,\n//   {\n//     data = props.data,\n//     selectedDate = props.selectedDate,\n//     selectedValue = props.selectedValue,\n//     height = props.height,\n//     width = props.width,\n//     marginLeft = props.margin,\n//     marginBottom = props.marginTop,\n//     marginRight = props.marginRight,\n//     padding = 0,\n//   }\n// ) {\n//   function usePrevious(value, defaultValue) {\n//     let isNotNull = value != null ? value : defaultValue;\n//     const ref = useRef();\n//     useEffect(() => {\n//       ref.current = isNotNull;\n//     });\n//     return ref.current;\n//   }\n\n//   const [animatedData, setAnimatedData] = useState(data);\n//   const [currentDate, setCurrentDate] = useState(null);\n//   const prevDate = usePrevious(currentDate, \"year\");\n\n//   let rScale = d3\n//     .scaleLinear()\n//     .domain(d3.extent(data, (d) => d[selectedValue]))\n//     .range([1, height / 80]);\n\n//   const xScale = (_, prevOrCurrent) =>\n//     d3\n//       .scaleSequential()\n//       .domain(d3.extent(data, (d) => d[prevOrCurrent]))\n//       .range([100, width]);\n\n//   let r = (selectedValue) => rScale(selectedValue);\n\n//   useEffect(() => {\n//     setCurrentDate(\"year\");\n//   }, []);\n\n//   const dodgedParticlesOrigin = dodge(\n//     data,\n//     prevDate,\n//     selectedValue,\n//     xScale(data, prevDate),\n//     r,\n//     padding\n//   );\n\n//   const dodgedParticlesDestination = dodge(\n//     data,\n//     currentDate,\n//     selectedValue,\n//     xScale(data, currentDate),\n//     r,\n//     padding\n//   );\n\n//   useEffect(() => {\n//     let isNotNull =\n//       dodgedParticlesOrigin[0].x && dodgedParticlesDestination[0].x\n//         ? true\n//         : false;\n\n//     const animation = () => {\n//       isNotNull === true &&\n//         gsap.fromTo(\n//           dodgedParticlesOrigin,\n//           {\n//             x: (index) => dodgedParticlesOrigin[index].x,\n//             y: (index) => dodgedParticlesOrigin[index].y,\n//           },\n//           {\n//             x: (index) => dodgedParticlesDestination[index].x,\n//             y: (index) => dodgedParticlesDestination[index].y,\n//             ease: \"power.3.out\",\n//             duration: 1,\n//             // Documentation: https://greensock.com/docs/v3/Staggers\n//             onUpdate: animate,\n//             lazy: true,\n//             stagger: {\n//               each: 0.001,\n//               from: \"random\",\n//             },\n//           }\n//         );\n//     };\n\n//     animation();\n\n//     function animate() {\n//       let newParticles = [];\n//       dodgedParticlesOrigin.map((d) => newParticles.push(d));\n//       isNotNull === true && setAnimatedData(newParticles);\n//     }\n//   }, [currentDate]);\n\n//   let timeFrames = [\"week\", \"month\", \"year\"];\n\n//   function onClick(e) {\n//     setCurrentDate(e.target.value);\n//   }\n\n//   const TimeButton = (timeframe, onClickFun) => {\n//     return (\n//       <button value={timeframe} onClick={onClickFun}>\n//         {timeframe}\n//       </button>\n//     );\n//   };\n\n//   return (\n//     <>\n//       {timeFrames.map((elem) => TimeButton(elem, onClick))}\n//       <svg width={width} height={height}>\n//         <g>\n//           {animatedData?.map((d, i) => {\n//             let notUndefined = typeof d.x != \"undefined\";\n//             return (\n//               <>\n//                 {notUndefined && (\n//                   <circle\n//                     r={d.r}\n//                     fill=\"purple\"\n//                     cx={d.x}\n//                     cy={height - marginBottom - padding - d.y}\n//                   >\n//                     {console.log(typeof d.x, notUndefined)}\n//                   </circle>\n//                 )}\n//               </>\n//             );\n//           })}\n//         </g>\n//       </svg>\n//     </>\n//   );\n// }\n\n// export default SvgScrollBeeswarm;\n","// FIGURING OUT YSCALE FOR STACKED ELEMENTS\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { graphql } from \"gatsby\";\nimport \"../styles.css\";\nimport { unNestDiaryData } from \"../consts/childhoodDiaryConsts\";\nimport { formatDataFunct } from \"../utils/childhoodDiaryUtils\";\nimport {SvgScrollBeeswarm} from \"../components/BeeswarmSvg\";\n\n\nconst ChildhoodDiarySwarmedSmooth = ({ data }) => {\n  const [width, setWidth] = useState(10000);\n  const [height, setHeight] = useState(10000);\n  const margin = 0;\n  const marginLeft = 100;\n  const marginRight= 100;\n\n  const marginTop = 0;\n  const containerRef = useRef();\n  const unNestData = unNestDiaryData(data);\n  const formattedData = formatDataFunct(unNestData);\n\n  useEffect(() => {\n    setWidth(containerRef.current.clientWidth);\n    setHeight(containerRef.current.clientHeight);\n    window.onresize = function () {\n      setWidth(containerRef.current.clientWidth);\n      setHeight(containerRef.current.clientHeight);\n\n    };\n  }, [width, height]);\n\n  return (\n    <div\n      ref={containerRef}\n      style={{ border: \"solid 2px white\", width: \"100%\", height: \"100vh\" }}\n    >\n      <SvgScrollBeeswarm\n        selectedDate=\"week\"\n        selectedValue=\"entry_word_count\"\n        data={formattedData}\n        margin={margin}\n        marginLeft={marginLeft}\n        marginTop={marginTop}\n        marginRight={marginRight}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query ChildhoodDiarySwarmedSmoothQuery {\n    allDataCsv {\n      edges {\n        node {\n          items {\n            date\n            formatted_date\n            entry_word_count\n            quarter\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ChildhoodDiarySwarmedSmooth;\n"],"names":["unNestDiaryData","elem","allDataCsv","edges","node","items","props","value","defaultValue","isNotNull","ref","data","selectedDate","selectedValue","height","width","marginLeft","margin","marginBottom","marginTop","marginRight","padding","useState","animatedData","setAnimatedData","currentDate","setCurrentDate","prevDate","useRef","useEffect","current","rScale","d3","domain","d","range","xScale","_","prevOrCurrent","r","dodgedParticlesOrigin","dodge","dodgedParticlesDestination","animate","newParticles","map","push","gsap","x","index","y","ease","duration","onUpdate","lazy","stagger","each","from","timeframe","setFun","onClick","e","target","TimeButton","renderer","i","diameter","stroke","setWidth","setHeight","containerRef","unNestData","formattedData","formatDataFunct","clientWidth","clientHeight","window","onresize","style","border"],"sourceRoot":""}