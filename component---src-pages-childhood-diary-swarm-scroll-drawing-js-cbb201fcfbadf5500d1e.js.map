{"version":3,"file":"component---src-pages-childhood-diary-swarm-scroll-drawing-js-cbb201fcfbadf5500d1e.js","mappings":"6NA4JA,UAxI+B,SAAC,GAAc,IACtCA,EADqC,EAAXC,KACNC,WAAWC,MAAM,GAAGC,KAAKC,MAEnD,GAAsDC,EAAAA,EAAAA,UAAS,MAAxDC,EAAP,KAA4BC,EAA5B,KACA,GAAoCF,EAAAA,EAAAA,WAClCG,EAAAA,EAAAA,KAAcC,OAAOC,iBAAmB,GADnCC,EAAP,KAAmBC,EAAnB,KAGA,GAAwCP,EAAAA,EAAAA,WACtCG,EAAAA,EAAAA,KAAcC,OAAOI,WAAa,GAD7BC,EAAP,KAAqBC,EAArB,KAGA,GAA0CV,EAAAA,EAAAA,WACxCG,EAAAA,EAAAA,KAAcC,OAAOO,YAAc,GAD9BC,EAAP,KAAsBC,EAAtB,KAqBA,IAAMC,EAAc,CAAC,OAAQ,QAAS,QAIhCC,GAAWC,EAAAA,EAAAA,QAAO,IAoBxB,OAjBAD,EAASE,QAAUH,EAAYI,KAC7B,SAACC,EAASC,GAAV,uBAAgBL,EAASE,QAAQG,UAAjC,SAAuCC,EAAAA,EAAAA,gBAGzCC,EAAAA,WAAgB,YACVnB,EAAAA,EAAAA,OACFO,EAAgBN,OAAOI,YACvBK,EAAiBT,OAAOO,aACxBJ,EAAcH,OAAOC,kBACrBD,OAAOmB,SAAW,WAChBb,EAAgBN,OAAOI,YACvBK,EAAiBT,OAAOO,aACxBJ,EAAcH,OAAOC,sBAGxB,CAACI,EAAcH,KAEE,KAAhBH,EAAAA,EAAAA,KACK,iCAIP,uBAAKqB,UAAU,IACb,2BACE,gBAAC,KAAD,CACEA,UAAW,SACXC,OAAwB,GAAhBb,EACRc,MAAsB,GAAfjB,EACPkB,WAAWC,EAAAA,EAAAA,IAAgBlC,GAC3BmC,cAAeA,EAAAA,EACfC,eACEC,EAAAA,EAAAA,IAA0B9B,GAAqB+B,eAEjDC,eAAe,mBACfC,UAAWjC,EACXkC,OAAuB,GAAf1B,EACR2B,WAA2B,GAAf3B,EACZ4B,UAA2B,GAAhBzB,EACXN,WAAYA,IAEd,uBAAKkB,UAAU,qBAIb,gBAAC,IAAD,CACEc,UAAW,EACXC,OAAQ,GACRC,YAvEU,SAACC,EAAUC,GAC7BxC,EAAuBuC,EAAS9C,OAuExBgD,OAAO,GAEN7B,EAAYI,KAAI,SAAC0B,EAAcxB,GAAf,OACf,gBAAC,IAAD,CAAMzB,KAAMiD,GACV,uBACEC,IAAKzB,EACL0B,IAAK/B,EAASE,QAAQG,GACtB2B,MAAO,CACLC,QAAS/C,IAAwB2C,EAAe,EAAI,IAEtDK,MAAM,iCAEN,uBACEC,GAAIjD,EAAsBmB,EAC1B2B,MAAO,CACLC,QAAgD,GAElDxB,UAAU,oBACVsB,IAAK/B,EAASE,QAAQG,IAErB,KACAW,EAAAA,EAAAA,IAA0Ba,GAAcO","sources":["webpack://visualization-sketches/./src/pages/childhood-diary-swarm-scroll-drawing.js"],"sourcesContent":["import React, { useEffect, useRef, createRef, useState } from \"react\";\nimport { ScrollSwarmDrawing } from \"../components/ScrollySwarm\";\nimport { useScrollData } from \"scroll-data-hook\";\nimport debounce from \"debounce\";\nimport { Link } from \"gatsby\";\nimport { useScrollRestoration } from \"gatsby\";\nimport { Scrollama, Step } from \"react-scrollama\";\nimport { graphql } from \"gatsby\";\nimport \"../styles.css\";\nimport { isBrowser } from \"../utils/staticRendering\";\nimport { scatterScrollingtextSwarm } from \"../utils/childhoodDiaryUtils\";\nimport { formatDataFunct } from \"../utils/childhoodDiaryUtils\";\n// import * as Scroll from 'react-scroll';\n\n// const ScrollSwarmPageDrawing = () => {\n//   return(\n//     <ScrollSwarmDrawing/>\n//   )\n// }\n\nconst ScrollSwarmPageDrawing = ({ data }) => {\n  const diaryRawData = data.allDataCsv.edges[0].node.items;\n\n  const [currentSelectedTime, setCurrentSelectedTime] = useState(null);\n  const [pixelRatio, setPixelRatio] = useState(\n    isBrowser() ? window.devicePixelRatio : 0\n  );\n  const [currentWidth, setCurrentWidth] = useState(\n    isBrowser() ? window.innerWidth : 0\n  );\n  const [currentHeight, setCurrentHeight] = useState(\n    isBrowser() ? window.innerHeight : 0\n  );\n\n  const onStepEnter = (stepdata, index) => {\n    setCurrentSelectedTime(stepdata.data);\n  };\n\n  const generateOffset = (stepdata, index) => {\n    console.log(\"OFFSET\", stepdata);\n    return 1;\n  };\n\n  function onStepProgress(data, index) {\n    console.log(\"STEPDATA\", data);\n    // window.scrollTo({\n    //   top: stepdata.element.offsetTop - currentHeight/2,\n    //   behavior: 'smooth'\n    // });\n  }\n\n  const scrollOrder = [\"year\", \"month\", \"week\"];\n\n  // const [elRefs, setElRefs] = useState([]);\n\n  const stepRefs = useRef([]);\n\n  // console.log(Object.keys(stepRefs).length != scrollOrder.length)\n  stepRefs.current = scrollOrder.map(\n    (element, i) => stepRefs.current[i] ?? createRef()\n  );\n\n  React.useEffect(() => {\n    if (isBrowser()) {\n      setCurrentWidth(window.innerWidth);\n      setCurrentHeight(window.innerHeight);\n      setPixelRatio(window.devicePixelRatio);\n      window.onresize = function () {\n        setCurrentWidth(window.innerWidth);\n        setCurrentHeight(window.innerHeight);\n        setPixelRatio(window.devicePixelRatio);\n      };\n    }\n  }, [currentWidth, pixelRatio]);\n\n  if (isBrowser() === false) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"\">\n      <div>\n        <ScrollSwarmDrawing\n          className={\"left-0\"}\n          height={currentHeight * 0.9}\n          width={currentWidth * 0.9}\n          particles={formatDataFunct(diaryRawData)}\n          useScrollData={useScrollData}\n          dateSelection={\n            scatterScrollingtextSwarm(currentSelectedTime).date_selection\n          }\n          valueSelection=\"entry_word_count\"\n          stepIndex={currentSelectedTime}\n          margin={currentWidth * 0.2}\n          marginLeft={currentWidth * 0.1}\n          marginTop={currentHeight * 0.1}\n          pixelRatio={pixelRatio}\n        />\n        <div className=\"w-1/4 float-right\">\n          {/* {scrollOrder.map((selectedTime, i) => (\n            <div ref={stepRefs.current[i]}></div>\n          ))} */}\n          <Scrollama\n            threshold={1}\n            offset={0.5}\n            onStepEnter={onStepEnter}\n            debug={false}\n          >\n            {scrollOrder.map((selectedTime, i) => (\n              <Step data={selectedTime}>\n                <div\n                  key={i}\n                  ref={stepRefs.current[i]}\n                  style={{\n                    opacity: currentSelectedTime === selectedTime ? 1 : 0.5,\n                  }}\n                  class=\"textStep scrollySwarmTextStep\"\n                >\n                  <div\n                    id={currentSelectedTime + i}\n                    style={{\n                      opacity: currentSelectedTime === selectedTime ? 1 : 1,\n                    }}\n                    className=\"scrollToSelection\"\n                    ref={stepRefs.current[i]}\n                  >\n                    {\" \"}\n                    {scatterScrollingtextSwarm(selectedTime).title}\n                  </div>\n                </div>\n              </Step>\n            ))}\n          </Scrollama>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query ScrollSwarmPageDrawing {\n    allDataCsv {\n      edges {\n        node {\n          items {\n            date\n            formatted_date\n            entry_word_count\n            quarter\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ScrollSwarmPageDrawing;\n"],"names":["diaryRawData","data","allDataCsv","edges","node","items","useState","currentSelectedTime","setCurrentSelectedTime","isBrowser","window","devicePixelRatio","pixelRatio","setPixelRatio","innerWidth","currentWidth","setCurrentWidth","innerHeight","currentHeight","setCurrentHeight","scrollOrder","stepRefs","useRef","current","map","element","i","createRef","React","onresize","className","height","width","particles","formatDataFunct","useScrollData","dateSelection","scatterScrollingtextSwarm","date_selection","valueSelection","stepIndex","margin","marginLeft","marginTop","threshold","offset","onStepEnter","stepdata","index","debug","selectedTime","key","ref","style","opacity","class","id","title"],"sourceRoot":""}