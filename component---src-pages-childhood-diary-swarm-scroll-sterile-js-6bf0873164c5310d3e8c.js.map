{"version":3,"file":"component---src-pages-childhood-diary-swarm-scroll-sterile-js-6bf0873164c5310d3e8c.js","mappings":"4NAoHA,UAtGyB,SAAC,GAAc,IAChCA,EAD+B,EAAXC,KACAC,WAAWC,MAAM,GAAGC,KAAKC,MAG7CC,EAAc,CAAC,OAAQ,QAAS,OAAO,OAAQ,OAAQ,QAAS,OAAQ,QAExEC,GAAWC,EAAAA,EAAAA,QAAO,IACxBD,EAASE,QAAUH,EAAYI,KAAI,SAACC,EAASC,GAAV,uBAAgBL,EAASE,QAAQG,UAAjC,SAAuCC,EAAAA,EAAAA,WAAUF,MAKpF,OAAsDG,EAAAA,EAAAA,UAAS,MAAxDC,EAAP,KAA4BC,EAA5B,KACA,GAAoCF,EAAAA,EAAAA,WAClCG,EAAAA,EAAAA,KAAcC,OAAOC,iBAAmB,GADnCC,EAAP,KAAmBC,EAAnB,KAGA,GAAwCP,EAAAA,EAAAA,WACtCG,EAAAA,EAAAA,KAAcC,OAAOI,WAAa,GAD7BC,EAAP,KAAqBC,EAArB,KAGA,GAA0CV,EAAAA,EAAAA,WACxCG,EAAAA,EAAAA,KAAcC,OAAOO,YAAc,GAD9BC,EAAP,KAAsBC,EAAtB,KAqBA,OAbAC,EAAAA,WAAgB,YACVX,EAAAA,EAAAA,OACFO,EAAgBN,OAAOI,YACvBK,EAAiBT,OAAOO,aACxBJ,EAAcH,OAAOC,kBACrBD,OAAOW,SAAW,WAChBL,EAAgBN,OAAOI,YACvBK,EAAiBT,OAAOO,aACxBJ,EAAcH,OAAOC,sBAGxB,CAACI,EAAcH,KAEE,KAAhBH,EAAAA,EAAAA,KACK,iCAIP,uBAAKa,UAAW,yBACd,2BACE,gBAAC,IAAD,CACEA,UAAW,+CACXC,OAAwB,IAAhBL,EACRM,MAAsB,GAAfT,EACPU,WAAWC,EAAAA,EAAAA,IAAgBlC,GAC3BmC,cAAeA,EAAAA,EACfC,eACEC,EAAAA,EAAAA,IAA0BtB,GAAqBuB,eAEjDC,eAAe,mBACfC,UAAWzB,EACX0B,OAAQ,GACRC,WAA2B,GAAfnB,EACZoB,UAA2B,GAAhBjB,EACXN,WAAYA,IAGd,uBAAKU,UAAU,iDACb,gBAAC,IAAD,CAAWc,OAAQ,GAAKC,YA1CZ,SAACC,GACnB9B,EAAuB8B,EAAS7C,OAyCwB8C,OAAO,GACtDzC,EAAYI,KAAI,SAACsC,EAAcC,GAAf,OACf,gBAAC,IAAD,CAAMhD,KAAM+C,GACV,uBAAKE,IAAK3C,EAASE,QAAQwC,GAAQE,GAAIH,EACrCI,MAAO,CACLC,QAAStC,IAAwBiC,EAAe,EAAI,IAEtDM,MAAM,kCAELjB,EAAAA,EAAAA,IAA0BW,GAAcO","sources":["webpack://visualization-sketches/./src/pages/childhood-diary-swarm-scroll-sterile.js"],"sourcesContent":["import React, { useRef, createRef, useState } from \"react\";\nimport {ScrollSwarmSterile} from \"../components/ScrollySwarm\";\nimport { useScrollData } from \"scroll-data-hook\";\nimport debounce from \"debounce\";\nimport { Link } from \"gatsby\"\nimport { useScrollRestoration } from \"gatsby\"\nimport { Scrollama, Step } from \"react-scrollama\";\nimport { graphql } from \"gatsby\";\nimport \"../styles.css\";\nimport { isBrowser } from \"../utils/staticRendering\";\nimport { scatterScrollingtextSwarm } from \"../utils/childhoodDiaryUtils\";\nimport { formatDataFunct } from \"../utils/childhoodDiaryUtils\";\n// import * as Scroll from 'react-scroll';\n\nconst ScrollySwarmPage = ({ data }) => {\n  const diaryRawData = data.allDataCsv.edges[0].node.items;\n\n\n  const scrollOrder = [\"year\", \"month\", \"week\",\"year\", \"year\", \"month\", \"week\", \"year\"]\n\n  const stepRefs = useRef([]);\n  stepRefs.current = scrollOrder.map((element, i) => stepRefs.current[i] ?? createRef(element));\n  function handleBackClick() {\n    stepRefs.current.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  const [currentSelectedTime, setCurrentSelectedTime] = useState(null);\n  const [pixelRatio, setPixelRatio] = useState(\n    isBrowser() ? window.devicePixelRatio : 0\n  );\n  const [currentWidth, setCurrentWidth] = useState(\n    isBrowser() ? window.innerWidth : 0\n  );\n  const [currentHeight, setCurrentHeight] = useState(\n    isBrowser() ? window.innerHeight : 0\n  );\n\n  const onStepEnter = (stepdata) => {\n    setCurrentSelectedTime(stepdata.data);\n  };\n\n  React.useEffect(() => {\n    if (isBrowser()) {\n      setCurrentWidth(window.innerWidth);\n      setCurrentHeight(window.innerHeight);\n      setPixelRatio(window.devicePixelRatio);\n      window.onresize = function () {\n        setCurrentWidth(window.innerWidth);\n        setCurrentHeight(window.innerHeight);\n        setPixelRatio(window.devicePixelRatio);\n      };\n    }\n  }, [currentWidth, pixelRatio]);\n\n  if (isBrowser() === false) {\n    return <></>;\n  }\n\n  return (\n    <div className={\"scrollySwarmContainer\"}>\n      <div>\n        <ScrollSwarmSterile\n          className={\"staticGraphicContainer scrollySwarmContainer\"}\n          height={currentHeight * 0.95}\n          width={currentWidth * 0.6}\n          particles={formatDataFunct(diaryRawData)}\n          useScrollData={useScrollData}\n          dateSelection={\n            scatterScrollingtextSwarm(currentSelectedTime).date_selection\n          }\n          valueSelection=\"entry_word_count\"\n          stepIndex={currentSelectedTime}\n          margin={45}\n          marginLeft={currentWidth * 0.1}\n          marginTop={currentHeight * 0.7}\n          pixelRatio={pixelRatio}\n        />\n\n        <div className=\"scrollingTextContainer darkModeScrollingTitle\">\n          <Scrollama offset={0.5} onStepEnter={onStepEnter} debug={false}>\n            {scrollOrder.map((selectedTime, index) => (\n              <Step data={selectedTime}>\n                <div ref={stepRefs.current[index]} id={selectedTime}\n                  style={{\n                    opacity: currentSelectedTime === selectedTime ? 1 : 0.2,\n                  }}\n                  class=\"textStep scrollySwarmTextStep\"\n                >\n                  {scatterScrollingtextSwarm(selectedTime).title}\n                </div>\n              </Step>\n            ))}\n          </Scrollama>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const query = graphql`\n  query ScrollySwarmPage {\n    allDataCsv {\n      edges {\n        node {\n          items {\n            date\n            formatted_date\n            entry_word_count\n            quarter\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ScrollySwarmPage;\n"],"names":["diaryRawData","data","allDataCsv","edges","node","items","scrollOrder","stepRefs","useRef","current","map","element","i","createRef","useState","currentSelectedTime","setCurrentSelectedTime","isBrowser","window","devicePixelRatio","pixelRatio","setPixelRatio","innerWidth","currentWidth","setCurrentWidth","innerHeight","currentHeight","setCurrentHeight","React","onresize","className","height","width","particles","formatDataFunct","useScrollData","dateSelection","scatterScrollingtextSwarm","date_selection","valueSelection","stepIndex","margin","marginLeft","marginTop","offset","onStepEnter","stepdata","debug","selectedTime","index","ref","id","style","opacity","class","title"],"sourceRoot":""}